// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.26.1
// source: proto_files/signup.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Signup_Authenticate_FullMethodName = "/signup.Signup/Authenticate"
)

// SignupClient is the client API for Signup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignupClient interface {
	Authenticate(ctx context.Context, in *SignUpCredentials, opts ...grpc.CallOption) (*SignUpAuthToken, error)
}

type signupClient struct {
	cc grpc.ClientConnInterface
}

func NewSignupClient(cc grpc.ClientConnInterface) SignupClient {
	return &signupClient{cc}
}

func (c *signupClient) Authenticate(ctx context.Context, in *SignUpCredentials, opts ...grpc.CallOption) (*SignUpAuthToken, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignUpAuthToken)
	err := c.cc.Invoke(ctx, Signup_Authenticate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignupServer is the server API for Signup service.
// All implementations must embed UnimplementedSignupServer
// for forward compatibility
type SignupServer interface {
	Authenticate(context.Context, *SignUpCredentials) (*SignUpAuthToken, error)
	mustEmbedUnimplementedSignupServer()
}

// UnimplementedSignupServer must be embedded to have forward compatible implementations.
type UnimplementedSignupServer struct {
}

func (UnimplementedSignupServer) Authenticate(context.Context, *SignUpCredentials) (*SignUpAuthToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedSignupServer) mustEmbedUnimplementedSignupServer() {}

// UnsafeSignupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignupServer will
// result in compilation errors.
type UnsafeSignupServer interface {
	mustEmbedUnimplementedSignupServer()
}

func RegisterSignupServer(s grpc.ServiceRegistrar, srv SignupServer) {
	s.RegisterService(&Signup_ServiceDesc, srv)
}

func _Signup_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpCredentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignupServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Signup_Authenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignupServer).Authenticate(ctx, req.(*SignUpCredentials))
	}
	return interceptor(ctx, in, info, handler)
}

// Signup_ServiceDesc is the grpc.ServiceDesc for Signup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Signup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "signup.Signup",
	HandlerType: (*SignupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _Signup_Authenticate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto_files/signup.proto",
}
